// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  app = angular.module('app', []);

  app.controller('MainCtrl', function() {
    var ctrl, currentSlide, elements, generateElements, go, renderTimeline, slideElements;
    ctrl = this;
    currentSlide = 0;
    slideElements = [];
    elements = [
      {
        type: 'text',
        value: 'slide 1 only',
        "in": 1,
        out: 2,
        top: 50,
        left: 200,
        transition_in: 'slide',
        duration_in: '1500',
        layer: 1
      }, {
        type: 'text',
        value: 'slides 2-3',
        "in": 2,
        out: 4,
        layer: 1
      }, {
        type: 'image',
        value: 'http://placehold.it/350x150/ffcccc/ffffff&text=1-3',
        "in": 1,
        out: 4,
        top: 50,
        left: 50,
        transition_out: 'slide',
        layer: 3
      }, {
        type: 'image',
        value: "http://placehold.it/100x100&text=2",
        "in": 2,
        out: 3,
        top: 50,
        left: 50,
        transition_out: 'slide-up',
        layer: 2
      }
    ];
    ctrl.elements = elements;
    ctrl.frameNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    ctrl.transitions = ['fade', 'slide', 'slide-up'];
    generateElements = function(elementList) {
      var child, css, delayIn, durationIn, el, elem, renderedElements, transitionIn, transitionOut, _i, _len;
      renderedElements = [];
      for (_i = 0, _len = elementList.length; _i < _len; _i++) {
        el = elementList[_i];
        elem = $('<div class="stack-element">');
        if (el.type === 'text') {
          child = $('<div class="content">').text(el.value);
        } else {
          child = $('<img class="content">').attr('src', el.value);
        }
        elem.append(child);
        elem.data('in', el["in"]);
        elem.data('out', el.out);
        elem.data('layer', el.layer);
        transitionIn = el.transition_in || 'fade';
        transitionOut = el.transition_out || 'fade';
        durationIn = el.duration_in || 300;
        delayIn = el.delay_in || 0;
        elem.addClass('transition-in-' + transitionIn);
        elem.addClass('transition-out-' + transitionOut);
        elem.addClass('duration-in-' + durationIn);
        elem.addClass('delay-in-' + delayIn);
        if (el.top) {
          css = {
            position: 'absolute',
            top: el.top,
            left: el.left
          };
          elem.find('.content').css(css);
        }
        renderedElements.push(elem);
      }
      $('#Stack #layer-1').append(_(renderedElements).filter(function(el) {
        return el.data('layer') === 1;
      }));
      $('#Stack #layer-2').append(_(renderedElements).filter(function(el) {
        return el.data('layer') === 2;
      }));
      $('#Stack #layer-3').append(_(renderedElements).filter(function(el) {
        return el.data('layer') === 3;
      }));
      return slideElements = $('#Stack .layer').children();
    };
    renderTimeline = function() {
      var asset, el, inNum, layers, lengthNum, outNum, _i, _len, _results;
      layers = $('#Timeline .timeline-row .layer');
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        el = elements[_i];
        inNum = el["in"];
        outNum = el.out;
        lengthNum = outNum - inNum;
        asset = $('<div class="asset">').text(el.value);
        asset.css('width', lengthNum * 80);
        asset.css('left', inNum * 80);
        _results.push($(layers[el.layer - 1]).append(asset));
      }
      return _results;
    };
    this.goBack = function() {
      return go(currentSlide, currentSlide - 1);
    };
    this.goNext = function() {
      return go(currentSlide, currentSlide + 1);
    };
    go = function(from, to) {
      var elem, element, inNum, outNum, _i, _len, _results;
      to = Math.min(elements.length, Math.max(0, to));
      currentSlide = to;
      ctrl.current = currentSlide;
      $(slideElements).removeClass('current next previous before after');
      _results = [];
      for (_i = 0, _len = slideElements.length; _i < _len; _i++) {
        element = slideElements[_i];
        elem = $(element);
        inNum = elem.data('in');
        outNum = elem.data('out');
        if (to > outNum) {
          _results.push(elem.addClass('before'));
        } else if (to === outNum) {
          _results.push(elem.addClass('previous'));
        } else if (to >= inNum && to < outNum) {
          _results.push(elem.addClass('current'));
        } else if (to === inNum - 1) {
          _results.push(elem.addClass('next'));
        } else if (to < inNum - 1) {
          _results.push(elem.addClass('after'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    generateElements(elements);
    go(0, 0);
    return renderTimeline();
  });

}).call(this);
